#include "include/UART.h"
#include "include/asm.h"
#include "include/timer.h"
#include "include/VIC.h"
#include "stddef.h"
#include "os.h"

#define STACK_SIZE 256 /* Size of our user task stacks in words */
#define TASK_LIMIT 2   /* Number of user task */

unsigned int tasknumber;

void print_uart0(char *s) {
	while(*s) {
		while(*(UART0 + UARTFR) & UARTFR_TXFF);
		*UART0 = *s;
		s++;
	}
}

/* Function that creates user task */
unsigned int* init_task(unsigned int *stack, void (*start)(void)) {
	stack += STACK_SIZE - 16; /* End of stack, minus what we're about to push */
	stack[0] = 0x10; /* User mode, interrupts on */
	stack[1] = (unsigned int)start; /* SP */
	stack[2] = 0; /* default LR */
	return stack;
}

void userFunction(void) {
	print_uart0("-usertask : First call of usertask !\n");
	syscall(3);
}

void anotherUserFunction(void) {
	
	while(1){
		print_uart0("usertask : Second task");
		//syscall(); /* To return in the kernel's mode */
	}
}


	
int c_entry(void) {
	
	/** VIC Configuration **/
	VIC_INT_SELECT = 0; // All interrupts are IRQ
	VIC_ENABLE_INT = 0x00000010; // Enable Timer01 Interrupt
	
	// Timer1 Configuration
	TIMER01_disable();
	TIMER01_LOAD_VALUE = 50000;
	//TIMER01_CONTROL |= 0x00000008;
	//TIMER01_enable();
	
	
	// Task initialisation
	struct taskstruct task1;
//	task1.sp = (void)&userFunction();
//	task1.registers[0] = 0; // r0
//	task1.registers[1] = 0; // r1
//	task1.registers[2] = 0; // r2
//	task1.registers[3] = 0; // r3
//	task1.registers[4] = 0; // r4
//	task1.registers[5] = 0; // r5
//	task1.registers[6] = 0; // r6
//	task1.registers[7] = 0; // r7
//	task1.registers[8] = 0; // r8
//	task1.registers[9] = 0; // r9
//	task1.registers[10] = 0; // r10
//	task1.registers[11] = 0; // r11
//	task1.registers[12] = 0; // r12
//	task1.lr = 0;
//	task1.pc = 0;
//	task1.cpsr = 0;
//	task1.mode = 0x10;


	
	
	
	unsigned int user_stacks[TASK_LIMIT][STACK_SIZE];
	unsigned int *usertasks[TASK_LIMIT];

	usertasks[0] = init_task(user_stacks[0], &userFunction);

	print_uart0("OS : Starting...\n");
	print_uart0("OS : Scheduler implementation : Round Robin\n");

	while(1) {
		usertasks[0] = activate(usertasks[0]);
	}
	
	return 0;
}

//void __attribute__((interrupt)) irq_handler() {
void event_irq_handler(void){	
 /* Determine the interrupt's source */

int src_IRQ = VIC_BASE_ADDR;
int i = 0;
		
VIC_CLEAR_INT = 0xFFFFFFFF;
TIMER01_disable();

 print_uart0("Interruption raised\r\n");
	switch(src_IRQ & 0x00000010)
	{
		case 0x00000010 : 	print_uart0("Interruption from timer 0\t");
							break;
		default : print_uart0("Interruption not from timer 0\r\n");
	}
VIC_ENABLE_INT = 0x00000010; // Enable Timer01 Interrupt
//TIMER01_LOAD_VALUE = 50000;
//TIMER01_enable();
}

void event_swi_handler(int taskNumber){

	char c_taskNumber = (char)((taskNumber & 0x000F) +(int)'0');
	print_uart0("task Number : ");

	print_uart0(&c_taskNumber);
	print_uart0("\r\n");
}


/* all other handlers are infinite loops (for the moment) */
void __attribute__((interrupt)) undef_handler(void) { for(;;); }
//void __attribute__((interrupt)) swi_handler(void)
void __attribute__((interrupt)) prefetch_abort_handler(void) { for(;;); }
void __attribute__((interrupt)) data_abort_handler(void) { for(;;); }
void __attribute__((interrupt)) fiq_handler(void) { for(;;); }


/* Copy the vector table to the 0x00000000 adddress */
void copy_vectors(void)
 {
	extern unsigned int vectors_start;
	extern unsigned int vectors_end;
	unsigned int *vectors_src = &vectors_start;
	unsigned int *vectors_dst = (unsigned int *)0;

	while(vectors_src < &vectors_end)
		*vectors_dst++ = *vectors_src++;
}
