#include "include/UART.h"
#include "include/asm.h"
#include "include/timer.h"
#include "include/VIC.h"
#include "stddef.h"
//#include "Task.h"

#define STACK_SIZE 256 /* Size of our user task stacks in words */
#define TASK_LIMIT 2   /* Number of user task */

unsigned int tasknumber;

struct taskstruct
{

	unsigned int * sp;
	unsigned int lr;
	unsigned int registers[12];
	unsigned int pc;
	unsigned int cpsr;
	unsigned int mode;

	void *stack;
	int stacksize;

	int priority;
	int state;                    /* Running, Ready, Waiting, Suspended */

	/* Next and previous task in the queue */
	//struct taskstruct *qnext, *qprev;
};

void print_uart0(char *s) {
	while(*s) {
		while(*(UART0 + UARTFR) & UARTFR_TXFF);
		*UART0 = *s;
		s++;
	}
}


void init_task(struct taskstruct * task, void (*function)(void) ){
	task->sp = (unsigned int*)&function;
	task->registers[0] = 0; // r0
	task->registers[1] = 0; // r1
	task->registers[2] = 0; // r2
	task->registers[3] = 0; // r3
	task->registers[4] = 0; // r4
	task->registers[5] = 0; // r5
	task->registers[6] = 0; // r6
	task->registers[7] = 0; // r7
	task->registers[8] = 0; // r8
	task->registers[9] = 0; // r9
	task->registers[10] = 0; // r10
	task->registers[11] = 0; // r11
	task->registers[12] = 0; // r12
	task->lr = 0;
	task->pc = 0;
	task->cpsr = 0;
	task->mode = 0x10;
}


void userFunction(void) {
	print_uart0("-usertask : First call of usertask !\n");
	while(1);
	syscall(0);
}

void anotherUserFunction(void) {
	
	while(1){
		print_uart0("usertask : Second task");
		//syscall(); /* To return in the kernel's mode */
	}
}

afficheValeurRegistres( int * r0)
{
	char printable = *r0 + (int)'0';
	print_uart0("r0 = ");
	print_uart0(&printable);
	print_uart0("\r\n");

	int i = 0;

	for(i = 0 ; i < 32 ; i ++)
	{
		printable = (*(&r0 + i)) + (int)'0';
		print_uart0(&printable);
	}

}

struct taskstruct task1;
	
int c_entry(void) {
	
	/** VIC Configuration **/
	VIC_INT_SELECT = 0; // All interrupts are IRQ
	VIC_ENABLE_INT = 0x00000010; // Enable Timer01 Interrupt
	
	// Timer1 Configuration
	TIMER01_disable();
	TIMER01_LOAD_VALUE = 50000;
	//TIMER01_CONTROL |= 0x00000008;
	//TIMER01_enable();
	
	
	// Task initialization
	init_task(&task1,&userFunction);


	print_uart0("OS : Starting...\n");
	print_uart0("OS : Scheduler implementation : Round Robin\n");



	activate(task1.sp);

	while(1) {

	}
	
	return 0;
}

//void __attribute__((interrupt)) irq_handler() {
void event_irq_handler(void){	
 /* Determine the interrupt's source */

int src_IRQ = VIC_BASE_ADDR;
int i = 0;
		
VIC_CLEAR_INT = 0xFFFFFFFF;
TIMER01_disable();

 print_uart0("Interruption raised\r\n");
	switch(src_IRQ & 0x00000010)
	{
		case 0x00000010 : 	print_uart0("Interruption from timer 0\t");
							break;
		default : print_uart0("Interruption not from timer 0\r\n");
	}
VIC_ENABLE_INT = 0x00000010; // Enable Timer01 Interrupt
//TIMER01_LOAD_VALUE = 50000;
//TIMER01_enable();
}


void event_swi_handler(int taskNumber){

	unsigned char c_taskNumber = ((taskNumber & 0x000F) +(unsigned int)'0');
	print_uart0("task Number that called the syscall : ");
	print_uart0(&c_taskNumber);
	print_uart0("\r\n");
}


/* all unimplemented handlers are infinite loops (for the moment) */
void __attribute__((interrupt)) undef_handler(void) { for(;;); }
void __attribute__((interrupt)) prefetch_abort_handler(void) { for(;;); }
void __attribute__((interrupt)) data_abort_handler(void) { for(;;); }
void __attribute__((interrupt)) fiq_handler(void) { for(;;); }


/* Copy the vector table to the 0x00000000 adddress */
void copy_vectors(void)
 {
	extern unsigned int vectors_start;
	extern unsigned int vectors_end;
	unsigned int *vectors_src = &vectors_start;
	unsigned int *vectors_dst = (unsigned int *)0;

	while(vectors_src < &vectors_end)
		*vectors_dst++ = *vectors_src++;
}


