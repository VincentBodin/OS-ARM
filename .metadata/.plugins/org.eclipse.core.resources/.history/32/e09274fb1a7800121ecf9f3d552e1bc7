.global swi_entry
swi_entry:
	/* Save user state */
	msr CPSR_c, #0xDF /* System mode */
	/* Appeler une fonction de sauvegarde de contexte */
	push {r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,fp,ip,lr}
	mov r0, sp
	msr CPSR_c, #0xD3 /* Supervisor mode */

	mrs ip, SPSR
	stmfd r0!, {ip,lr}

	/* Load kernel state */
	pop {r4,r5,r6,r7,r8,r9,r10,fp,ip,lr}
	mov sp, ip
	bx lr

.global activate
activate:

	mov r0, #0
	mov r1, #1
	mov r2, #2
	mov r3, #3
	mov r4, #4

	STMDB sp!, {r0,r1,r2,r3,r4}
	mov r0, sp
	msr CPSR_c, #0xD3 /* Supervisor mode*/
	BL afficheValeurRegistres

.global asm_getRegistersValue
asm_getRegistersValue:

	stmdb  sp!, {r1-r14}
    blx   lr
