#include "include/UART.h"
#include "include/asm.h"
#include "include/timer.h"
#include "include/VIC.h"
#include "stddef.h"
//#include "Task.h"

#define STACK_SIZE 256 /* Size of our user task stacks in words */
#define TASK_LIMIT 2   /* Number of user task */
#define RUN			0
#define READY		1
#define WAIT		2

unsigned int taskNumber;
unsigned int currentTask;
unsigned int swi_caller;

struct taskstruct
{

	unsigned int *sp;
	unsigned int registers[12];
	unsigned int lr;
	unsigned int pc;
	unsigned int cpsr;
	unsigned int mode;
	unsigned int num;
	void *stack;
	int stacksize;

	int priority;
	int state;                    /* Running, Ready, Waiting, Suspended */

	/* Next and previous task in the queue */
	struct taskstruct *qnext, *qprev;
};

void print_uart0(char *s) {
	while(*s) {
		while(UARTFR & UARTFR_TXFF);
		UART0 = *s;
		s++;
	}
}


void init_task(struct taskstruct * task, void (*function)(void) ){
	task->sp = (unsigned int*)&function;
	task->registers[0] = 0; // r0
	task->registers[1] = 0; // r1
	task->registers[2] = 0; // r2
	task->registers[3] = 0; // r3
	task->registers[4] = 0; // r4
	task->registers[5] = 0; // r5
	task->registers[6] = 0; // r6
	task->registers[7] = 0; // r7
	task->registers[8] = 0; // r8
	task->registers[9] = 0; // r9
	task->registers[10] = 0; // r10
	task->registers[11] = 0; // r11
	task->registers[12] = 0; // r12
	task->lr = 0;
	task->pc = 0;
	task->cpsr = 0;
	task->mode = 0x10;
}


void task1Function(void) {
	print_uart0("-usertask : First task is started...\r\n");
	while(1){
		//print_uart0("-usertask : First task is running...\r\n");
		//syscall(1);
	}
}

void task2Function(void) {


		print_uart0("usertask : Second task is running...\r\n");
		//syscall(); /* To return in the kernel's mode */
		while(1){

		}
}

void task3Function(void) {
	

		print_uart0("usertask : Third task is running ...\r\n");
		//syscall(); /* To return in the kernel's mode */
		while(1){

		}
}

/* Debug function */
afficheValeurRegistres( int * ptr)
{
	char printable;
	int * pointeur;

	print_uart0("Affichage des registres reçus\r\n");
	printable = *ptr + (int)'0';
	print_uart0(&printable);
	print_uart0("\r\n");

	printable = *(ptr+1) + (int)'0';
	print_uart0(&printable);
	print_uart0("\r\n");

	printable = *(ptr+2) + (int)'0';
	print_uart0(&printable);
	print_uart0("\r\n");

/*	printable = *ptr + (int)'0';
	print_uart0(&printable);
	print_uart0("\r\n");

	printable = *ptr + (int)'0';
	print_uart0(&printable);
	print_uart0("\r\n");*/
}

struct taskstruct task[3];
	
void c_entry(void) {
	
	/** VIC Configuration **/
	VIC_INT_SELECT = 0; // All interrupts are IRQ
	VIC_ENABLE_INT = 0x00000210; // Enable Timer01 Interrupt and UART0

	// Task initialization
	init_task(&task[0],&task1Function);
	init_task(&task[1],&task2Function);
	init_task(&task[2],&task3Function);

	// Link tasks
	task[0].qnext = &task[1];
	task[1].qnext = &task[0];
	task[2].qnext = &task[3];
	task[3].qnext = &task[0];

	print_uart0("OS : Starting...\n");
	print_uart0("OS : Scheduler implementation : Round Robin\n");

	currentTask = 0;

	/* Enable IRQ interrupt */
	asm("MSR CPSR_c, 0x13");

	// Timer1 Configuration
	//TIMER01_disable();
	TIMER01_LOAD_VALUE = 65000;
	//TIMER01_CONTROL |= 0x00000008;
	TIMER01_enable();


	/* Start the first user task in user mode ! */
	//asm("MSR CPSR_c, 0x10");
	activate(task[currentTask].sp);

	while(1){
		/* Disable IRQ interrupt */
		TIMER01_disable();
		asm("MSR CPSR_c, 0xC3");
		print_uart0("Kernel get back control ! \n");
		if(currentTask <= 2) currentTask += 1;
			else currentTask = 0;

		char printable = currentTask+(int)'0';
		print_uart0("Next activated task : "); print_uart0(&printable);
		print_uart0("\r\n");
		activate(task[currentTask].sp);
	}
}


//void __attribute__((interrupt)) irq_handler() {
void event_irq_handler(void){
 /* Determine the interrupt's source */

int src_IRQ = VIC_BASE_ADDR;
int i = 0;

TIMER01_CLEAR_INT = 1;
VIC_CLEAR_INT = 0xFFFFFFFF;
TIMER01_disable();

 print_uart0("\n**********************************\n");
 print_uart0("\tInterruption raised\n");
 print_uart0("************************************\n");

	switch(src_IRQ & 0x00000010)
	{
		case 0x00000010 : 	print_uart0("Interruption from timer 0\t\n");
							break;
		case 0x00000800 :	print_uart0("Interruption from UART0\t\n");
							break;
		default : print_uart0("Interruption unknown\r\n");
	}

VIC_ENABLE_INT = 0x00000010; // Enable Timer01 Interrupt
TIMER01_LOAD_VALUE = 50000;
TIMER01_enable();

}


void saveTaskContext(int * ptr){
	int i = 0;
	for ( i = 0 ; i < 13 ; i++){
		task[currentTask].registers[i] = *(ptr+i);
	}

	task[currentTask].lr = *(ptr+14);
	task[currentTask].pc = task[currentTask].lr; // Cause it's where we have to branch the next time


	/*print_uart0("Affichage des registres après sauvegarde : \n");
	char printable = task[currentTask].registers[0] + (int)'0';
	print_uart0(&printable);
	print_uart0("\r\n");
	printable = task[currentTask].registers[1] + (int)'0';
	print_uart0(&printable);
	print_uart0("\r\n");
	printable = task[currentTask].registers[2] + (int)'0';
	print_uart0(&printable);
	print_uart0("\r\n");*/
}

int * loadTaskContext(void){
	if(currentTask < 2) currentTask += 1;
	else currentTask = 0;

	return &task[currentTask].registers[0];
}

void event_swi_handler(int taskNumber){

	unsigned char c_taskNumber = ((taskNumber & 0x000F) +(unsigned int)'0');
	print_uart0("task Number that called the syscall : ");
	print_uart0(&c_taskNumber);
	print_uart0("\r\n");
}


/* all unimplemented handlers are infinite loops (for the moment) */
void __attribute__((interrupt)) undef_handler(void) { for(;;); }
void __attribute__((interrupt)) prefetch_abort_handler(void) { for(;;); }
void __attribute__((interrupt)) data_abort_handler(void) { for(;;); }
void __attribute__((interrupt)) fiq_handler(void) { for(;;); }


/* Copy the vector table to the 0x00000000 adddress */
void copy_vectors(void)
 {
	extern unsigned int vectors_start;
	extern unsigned int vectors_end;
	unsigned int *vectors_src = &vectors_start;
	unsigned int *vectors_dst = (unsigned int *)0;

	while(vectors_src < &vectors_end)
		*vectors_dst++ = *vectors_src++;
}


